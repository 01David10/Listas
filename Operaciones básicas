# include <iostream>
# include <stdlib.h>
# include <string>

using namespace std;

// operaciones basicas con listas simplemente ligadas

// estructura nodo
struct Nodo
{
    int dato;           // numero entero
    Nodo *siguiente;
};

// cabecera
Nodo *lista = NULL;     // Lista principal (creo que es la cabeza)

// parametrizacion
void MENU (void);
void INSERTAR_ORDENADA (Nodo *&, int);
void INSERTAR_FINAL (Nodo *&lista, int valor); // 
void INSERTAR_INICIO (Nodo *&, int);
void IMPRIMIR (Nodo *);
void IMPRIMIR_DETALLE (Nodo *);
void BUSCAR (Nodo *);
void ELIMINAR (Nodo *&);
void ELIMINAR_REPETIDOS (Nodo *&);
void INSERTAR_ESPECIFICO (Nodo *&lista);
void ORDENAR_ASCENDENTE (Nodo *&);
void ORDENAR_DESCENDENTE (Nodo *&);
void LIBERAR (Nodo *&lista);

// programa principal
int main ()
{
    MENU ();

    getchar();
    getchar();
    return 0;
}

// procedimiento para menu
void MENU ()
{
     // variables
    short Opcion, Dato;
    string Pregunta;

    do
    {
        cout << "Menu de opciones" << endl;
        cout << "Por favor ingrese la opcion que desea: " << endl;

        cout << "1 - Insertar elemento a la lista (ordenada)" << endl;
        cout << "2 - Insertar elemento a la lista (al final)" << endl;
        cout << "3 - Insertar elemento a la lista (al inicio)" << endl;
        cout << "4 - Imprimir lista (sin detalles)" << endl;
        cout << "5 - Imprimir lista (con detalles)" << endl;
        cout << "6 - Buscar elemento en la lista" << endl;
        cout << "7 - Eliminar elemento en la lista" << endl;
        cout << "8 - Eliminar elemento repetido en la lista" << endl;
        cout << "9 - Insertar elemento a la lista (posicion especifica)" << endl;
        cout << "10 - Ordenar lista (ascendentemente)" << endl;
        cout << "11 - Ordenar lista (descendentemente)" << endl;
        cout << "12 - Liberar lista" << endl;
        
        cin >> Opcion;

        switch (Opcion)
        {
            case 1:
                cout << "Desea agregar un nuevo elemento a la lista? ";     // asi puedo insertar varios elementos al tiempo
                cin >> Pregunta;

                while (Pregunta == "si")
                {
                    cout << "Digite un numero ";
                    cin >> Dato;

                    INSERTAR_ORDENADA (lista, Dato);

                    cout << "Desea agregar un nuevo elemento a la lista? ";
                    cin >> Pregunta;
                } 
            break;

            case 2:
                cout << "Desea agregar un nuevo elemento a la lista? ";     // asi puedo insertar varios elementos al tiempo
                cin >> Pregunta;

                while (Pregunta == "si")
                {
                    cout << "Digite un numero ";
                    cin >> Dato;

                    INSERTAR_FINAL (lista, Dato);

                    cout << "Desea agregar un nuevo elemento a la lista? ";
                    cin >> Pregunta;
                }
            break;

            case 3:
                cout << "Desea agregar un nuevo elemento a la lista? ";     // asi puedo insertar varios elementos al tiempo
                cin >> Pregunta;

                while (Pregunta == "si")
                {
                    cout << "Digite un numero ";
                    cin >> Dato;

                    INSERTAR_INICIO (lista, Dato);

                    cout << "Desea agregar un nuevo elemento a la lista? ";
                    cin >> Pregunta;
                }
            break;

            case 4:
				IMPRIMIR (lista);
            break;

            case 5:
				IMPRIMIR_DETALLE (lista);
            break;

            case 6:
                BUSCAR (lista);
            break;

            case 7:
                ELIMINAR (lista);
            break;

            case 8:
                ELIMINAR_REPETIDOS (lista);
            break;

            case 9:
                INSERTAR_ESPECIFICO (lista);
            break;

            case 10:
                ORDENAR_ASCENDENTE (lista);
            break;

            case 11:
                ORDENAR_DESCENDENTE (lista);
            break;

            case 12:
                LIBERAR (lista);
            break;
        
            default:
                exit (0);
            break;
        }
    }
    while (Opcion);
}

// procedimiento para insertar elemento (en orden ascendente)
void INSERTAR_ORDENADA (Nodo *&lista, int dato)
{
    // nodo
    Nodo *Aux;              // guarda los datos inicialmente
    Nodo *Aux_2;            // compara los datos para luego ordenarlos
    Nodo *Aux_3;            // nodo (posicion) donde se inserta el nuevo elemento

    // asigna el puntero
    Aux = new Nodo();

    Aux->dato = dato;

    Aux_2 = lista;

    // busca donde se debe insertar
    while (Aux_2 != NULL && Aux_2->dato < dato)
    {
        Aux_3 = Aux_2;
        Aux_2 = Aux_2->siguiente;
    }
    
    // ingresa el elemento
    if (lista == Aux_2)
    {
        lista = Aux;
    }
    else
    {
        Aux_3->siguiente = Aux;
    }

    Aux->siguiente = Aux_2;
}

// procedimiento para insertar elemento (al final). Se imprimen en el orden en el que se ingresan
void INSERTAR_FINAL (Nodo *&lista, int valor)
{
    Nodo *Aux;      // acceden a algunos elementos
    Nodo *Aux_2;    // acceden a algunos elementos
    
    Aux = (Nodo*)malloc(sizeof(Nodo));
 
    Aux->dato = valor;
    Aux->siguiente = NULL;
 
    if (lista == NULL)
    {
        lista = Aux;
    }
    else
    {
        Aux_2 = lista;
        while (Aux_2->siguiente != NULL)
        {
            Aux_2 = Aux_2->siguiente;
        }
        Aux_2->siguiente = Aux;
    }
}

// procedimiento para insertar elemento (al inicio). LIFO (last in first out). Se imprimen en orden contrario al que se ingresan
void INSERTAR_INICIO (Nodo *&lista, int Dato)
{
    // puntero
    Nodo *Aux;      // este va ser el nodo que guardara el primer elemento. Cuando vuelva a entrar al procedimiento creara un nuevo nodo con el 2 elemento y asi sucesivamente...

    // asignar puntero
    Aux = new Nodo ();
    
    Aux->dato = Dato;
    Aux->siguiente = lista;
    lista  = Aux;
}

// procedimiento para imprimir la lista
void IMPRIMIR (Nodo *lista)
{
    int i = 1;
 
    while (lista != NULL)
    {
        cout << "Elemento " << i <<": " << lista->dato << endl;

        lista = lista->siguiente;

        i++;
    }
}

// procedimiento para imprimir la lista (con detalle)
void IMPRIMIR_DETALLE (Nodo *Lista)
{
    // variables
    short i;

    i = 1;

	while(Lista != NULL)
	{
		cout << endl;
        cout << "Posicion del elemento " << i << ": " << Lista << endl;
		cout << "Dato del elemento " << i << ": " << Lista->dato << endl;
		cout << "Hacia donde apunta el elemento " << i << ": " << Lista->siguiente << endl << endl;

		Lista = Lista->siguiente;	

        i ++;
	}
}

// procedimiento para buscar elemento
void BUSCAR (Nodo *lista)
{
    // puntero
    Nodo *Aux = lista;

    // variables
    int i, band, Dato_Buscar;

    cout << "Ingrese el dato que desea buscar: " << endl;
    cin >> Dato_Buscar;

    i = 1;
    band = 0;
 
    while (Aux != NULL)
    {
        if(Aux->dato == Dato_Buscar)
        {
            cout << endl << " Encontrada en posicion " << i << endl;
            band = 1;
        }
        Aux = Aux->siguiente;
        i++;
    }
 
    if(band == 0)
        cout<< "\n\n Numero no encontrado..!" << endl;
}

// procedimiento para eliminar elemento
void ELIMINAR (Nodo *&lista)
{
    // variables
    int Dato;

    // nodos
    Nodo *Aux, *Anterior;

    Aux = lista;

    cout << "Ingrese el dato que desea eliminar ";
    cin >> Dato; 
 
    if (lista != NULL)
    {
        while (Aux != NULL)
        {
            if (Aux->dato == Dato)
            {
                if (Aux == lista)
                    lista = lista->siguiente;
                else
                    Anterior->siguiente = Aux->siguiente;
                delete (Aux);
                return;
            }
            Anterior = Aux;
            Aux = Aux->siguiente;
        }
    }
    else
    cout << " La lista esta vacia";
}

// procedimiento para eliminar elementos repetidos
void ELIMINAR_REPETIDOS (Nodo *&lista)
{
    // punteros
    Nodo *Aux, *Anterior;

    // asignacion de punteros
    Aux = lista;
    Anterior = lista;

    // variables
    int Valor_Buscar;

    cout << "Ingrese el elemento repetido que desea eliminar ";
    cin >> Valor_Buscar;
 
    while (Aux != NULL)
    {
        if (Aux->dato == Valor_Buscar)
        {
            if (Aux == lista) // primer elemento
            {
                lista = lista->siguiente;
                delete (Aux);
                Aux = lista;
            }
            else
            {
                Anterior->siguiente = Aux->siguiente;
                delete (Aux);
                Aux = Anterior->siguiente;
            }
        }
        else
        {
            Anterior = Aux;
            Aux = Aux->siguiente;
        }
    }
    cout << "\n\nLos valores han sido eliminados" << endl;
}

// procedimiento para insertar elemento en una posicion especifica
void INSERTAR_ESPECIFICO (Nodo *&lista)
{
    // punteros
    Nodo *Aux, *Aux_2;

    // asignacion de punteros
    Aux = new Nodo ();

    // variables
    int Valor_Insertar, Posicion, i, Bandera, Opcion;

    cout << "Ingrese el valor que desea insertar ";
    cin >> Valor_Insertar;

    Aux->dato = Valor_Insertar;

    cout << "Ingrese la posicion donde desea insertar el valor ";
    cin >> Posicion;
 
    if (Posicion == 1)
    {
        Aux->siguiente = lista;
        lista = Aux;
    }
    else
    {
        Aux_2 = lista;
 
        for (i=1; Aux_2 != NULL; i++)
        {
            if (i == Posicion-1)
            {
                Aux->siguiente = Aux_2->siguiente;
                Aux_2->siguiente = Aux;
                return;
            }
            Aux_2 = Aux_2->siguiente;
        }
    }
    cout<< "Posicion no encontrada"<<endl;
}

// procedimiento para ordenar (ascendentemente)
void ORDENAR_ASCENDENTE (Nodo *&lista)
{
    Nodo *actual, *siguiente;
    int Aux;        // guarda el dato, para que no se pierda
     
    actual = lista;
    while (actual->siguiente != NULL)
    {
        siguiente = actual->siguiente;
          
        while (siguiente != NULL)
        {
            if (actual->dato > siguiente->dato)
            {
                Aux = siguiente->dato;
                siguiente->dato = actual->dato;
                actual->dato = Aux;          
            }
            siguiente = siguiente->siguiente;                    
        }    
        actual = actual->siguiente;
        siguiente = actual->siguiente; 
    }
    cout << "La lista ha sido ordenada" << endl << endl;
}

// procedimiento para ordenar (descendentemente)
void ORDENAR_DESCENDENTE (Nodo *&lista)
{
    Nodo *actual, *siguiente;
    int Aux;        // guarda el dato, para que no se pierda
     
    actual = lista;
    while (actual->siguiente != NULL)
    {
        siguiente = actual->siguiente;
          
        while (siguiente != NULL)
        {
            if (actual->dato < siguiente->dato)
            {
                Aux = siguiente->dato;
                siguiente->dato = actual->dato;
                actual->dato = Aux;          
            }
            siguiente = siguiente->siguiente;                    
        }    
        actual = actual->siguiente;
        siguiente = actual->siguiente; 
    }
    cout << "La lista ha sido ordenada" << endl << endl;
}

// procedimiento para liberar la lista
void LIBERAR (Nodo *&lista)
{
    // nodos
    Nodo *temp;     // guarda los datos de lista, para irlos borrando

    while (lista != NULL)
    {
        temp = lista;                   // esto es lo que borra
        lista = lista->siguiente;       // pasa al siguiente elemento
        free(temp);
    }
}

